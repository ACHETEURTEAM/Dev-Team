<?php


/** @var $upsModel \Magento\Ups\Helper\Config */
/** @var $block \Magento\Ups\Block\Backend\System\CarrierConfig */
$upsCarrierConfig = $block->getCarrierConfig();
$orShipArr = $upsCarrierConfig->getCode('originShipment');
$defShipArr = $upsCarrierConfig->getCode('method');

$sectionCode = $block->getRequest()->getParam('section');
$websiteCode = $block->getRequest()->getParam('website');
$storeCode = $block->getRequest()->getParam('store');


$vendorId = $this->customerSession->getVendorId();
$activeMethods = $this->helper('Ced\CsMultiShipping\Helper\Data')->getActiveVendorMethods($vendorId);
$stroredAllowedMethods = array();
if (isset($activeMethods['ups']['allowed_methods'])) {
    $stroredAllowedMethods = explode(',', $activeMethods['ups']['allowed_methods']);
}
$stroredOriginShipment = isset($activeMethods['ups']['origin_shipment']) ? $activeMethods['ups']['origin_shipment'] : '';

?>
<script>
    require(["prototype"], function () {

//<![CDATA[
        originShipmentObj = new Object();

        <?php
        //get origin shipment data, using in UPS XML module
        foreach ($orShipArr as $key => $val) {
            print "originShipmentObj['$key'] = new Object();\n";
            foreach ($val as $code => $label) {
                print "\toriginShipmentObj['$key']['$code'] = '$label';\n";
            }
        }
        ?>
        //get default shipment data, using in UPS module
        <?php
        print "originShipmentObj['default'] = new Object();\n";
        foreach ($defShipArr as $code => $label) {
            print "\toriginShipmentObj['default']['$code'] = '$label';\n";
        }
        ?>
        //get stored Allowed Methods
        <?php
        print "stroredAllowedMethods = new Array();\n";
        foreach ($stroredAllowedMethods as $code) {
            print "\tstroredAllowedMethods.push('$code');\n";
        }
        ?>
        //set stored origin shipment
        <?php
        print "stroredOriginShipment='$stroredOriginShipment'";
        ?>

        function hideRowArrayElements(arr, method) {
            for (a = 0; a < arr.length; a++) {
                $(arr[a]).up(1).hide();
            }
        }

        function showRowArrayElements(arr, method) {
            for (a = 0; a < arr.length; a++) {
                $(arr[a]).up(1).show();
            }
        }

        function inArray(arr, value) {
            var i;
            for (i = 0; i < arr.length; i++) {
                if (arr[i] === value) {
                    return true;
                }
            }
            return false;
        }

        var upsXml = Class.create();
        upsXml.prototype = {
            initialize: function () {

                this.carriersUpsOriginShipmentId = 'ups-origin_shipment';
                if ($(this.carriersUpsOriginShipmentId)) {
                    this.originShipmentTitle = '';
                    this.allowedMethodsId = 'ups-allowed_methods';
                    this.setFormValues();
                    Event.observe($('ups-origin_shipment'), 'change', this.setFormValues.bind(this));
                }

            },
            updateAllowedMethods: function (originShipmentTitle) {
                selectFieldAllowedMethod = $(this.allowedMethodsId);
                originShipment = originShipmentObj[originShipmentTitle];

                while (selectFieldAllowedMethod.length > 0) {
                    selectFieldAllowedMethod.remove(0);
                }
                //alert(originShipment);
                for (code in originShipment) {
                    var option = document.createElement("OPTION");
                    option.text = originShipment[code];
                    option.value = code;

                    if ((originShipmentTitle == stroredOriginShipment || originShipmentTitle == 'default') && inArray(stroredAllowedMethods, code)) {
                        option.selected = true;
                    }
                    try {
                        selectFieldAllowedMethod.add(option, null); // standards compliant; doesn't work in IE
                    } catch (ex) {
                        selectFieldAllowedMethod.add(option); // IE only
                    }
                }
            },
            setFormValues: function () {
                if (<?php echo $this->_scopeConfig->getValue('carriers/ups/type', \Magento\Store\Model\ScopeInterface::SCOPE_STORE) == "UPS" ? 1 : 0;?>) {
                    Event.stopObserving($('ups-origin_shipment'), 'change', this.changeOriginShipment.bind(this));
                    this.changeOriginShipment(null, 'default');
                } else {
                    Event.observe($('ups-origin_shipment'), 'change', this.changeOriginShipment.bind(this));
                    this.changeOriginShipment();
                }
            },
            changeOriginShipment: function (Event, key) {

                if (key)
                    this.originShipmentTitle = key
                else
                    this.originShipmentTitle = $F('ups-origin_shipment');
                this.updateAllowedMethods(this.originShipmentTitle);
            }
        }
        xml = new upsXml();
        //]]>

    });
</script>
